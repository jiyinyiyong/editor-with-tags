// Generated by CoffeeScript 1.6.2
var EditorWithTags;

EditorWithTags = function(options) {
  this.options = options;
  this.elem = $("<div>").addClass("editor-with-tags");
  this.input = $("<div>").addClass("input").attr("contenteditable", true);
  this.menu = $("<div>").addClass("menu");
  this.elem.append(this.input, this.menu);
  this.elem.find(".input").append($(document.createTextNode("")));
  this.elem.find(".input").append("<br>");
  this.setupEvents();
};

EditorWithTags.prototype = {
  contructor: EditorWithTags,
  text: function(value) {},
  delay: function(t, f) {
    var _this = this;

    return setTimeout((function() {
      return f();
    }), t);
  },
  position: {
    left: 0
  },
  editable: function(elem) {
    return elem.attr("contenteditable", true);
  },
  setupEvents: function() {
    var _this = this;

    this.events = new EventEmitter;
    this.elem.on("focus", ".input", function(event) {
      return _this.focus(event);
    });
    this.elem.on("blur", ".input", function(event) {
      return _this.blur(event);
    });
    this.elem.on("keydown", ".input", function(event) {
      return _this.onkeydown(event);
    });
    this.elem.on("keyup", ".input", function(event) {
      return _this.onkeyup(event);
    });
    return this.elem.on("click", ".input", function(event) {
      var elem;

      elem = $(event.target);
      return elem[0].focus();
    });
  },
  focus: function() {
    console.log("focus");
    return this.elem.addClass("focus");
  },
  blur: function() {
    return this.elem.removeClass("focus");
  },
  onkeydown: function(event) {
    var _ref;

    if ((_ref = event.keyCode) === 13 || _ref === 38 || _ref === 40) {
      switch (event.keyCode) {
        case 13:
          this.hitEnter(event);
          break;
        case 38:
          this.hitUp(event);
          break;
        case 40:
          this.hitDown(event);
      }
      event.preventDefault();
      return false;
    }
    return this.events.emit("keydown", event);
  },
  onkeyup: function(event) {
    var _ref;

    this.events.emit("keyup", event);
    if ((_ref = event.keyCode) === 13 || _ref === 38 || _ref === 40) {
      event.preventDefault();
      return false;
    }
    return this.getOffsetLeft();
  },
  textSpan: function() {
    return $("<span>").attr("contenteditable", true).text("@");
  },
  keydown: function(callback) {
    return this.events.on("keydown", callback);
  },
  keyup: function(callback) {
    return this.events.on("keyup", callback);
  },
  hitEnter: function(event) {
    if (this.hasMenu) {
      this.selectOption();
    }
    return console.log(event);
  },
  hitUp: function(event) {
    if (this.hasMenu) {
      this.selectLast();
    }
    return console.log(event);
  },
  hitDown: function(event) {
    if (this.hasMenu) {
      this.selectNext();
    }
    return console.log(event);
  },
  replaceHTML: function(html) {
    return this.input.html(html);
  },
  getHTML: function() {
    return this.input.html();
  },
  getOffsetLeft: function() {
    var after, before, cursor, end, newRange, node, range, sel, start, suggests, text;

    range = document.getSelection().getRangeAt(0);
    if (!range.collapsed) {
      return null;
    }
    node = range.commonAncestorContainer;
    text = node.data;
    if (text == null) {
      return null;
    }
    start = range.startOffset;
    end = range.endOffset;
    before = text.slice(0, start);
    after = text.slice(start);
    suggests = this.read(before);
    if (suggests.length > 0) {
      $(node).after("<span id='cursor'></span>");
      cursor = this.elem.find("#cursor");
      node.data = before;
      this.position = cursor.position(this.elem);
      this.drawMenu(suggests);
      this.dropMenu();
      if (this.piece === "") {
        this.moveMenu();
      }
      this.selectNext();
      cursor.remove();
      node.data = text;
      newRange = document.createRange();
      newRange.setStart(node, start);
      newRange.collapse(true);
      sel = document.getSelection();
      sel.removeAllRanges();
      return sel.addRange(newRange);
    } else {
      return this.foldMenu();
    }
  },
  insertTag: function(data) {
    var after, before, newRange, newText, node, range, sel, start, text;

    range = document.getSelection().getRangeAt(0);
    node = range.startContainer;
    text = node.textContent;
    start = range.startOffset;
    before = text.slice(0, start);
    after = text.slice(start);
    node.data = before.slice(0, -1);
    newText = $(document.createTextNode("x"));
    $(node).after(newText);
    $(node).after(this.makeTag(data));
    newText[0].textContent = after + "";
    newRange = document.createRange();
    newRange.setStart(newText[0], 0);
    newRange.collapse = true;
    sel = document.getSelection();
    sel.removeAllRanges();
    return sel.addRange(newRange);
  },
  hasMenu: false,
  dropMenu: function() {
    if (!this.hasMenu) {
      console.log("drop");
      this.hasMenu = true;
      return this.elem.find(".menu").slideDown();
    }
  },
  foldMenu: function() {
    if (this.hasMenu) {
      this.hasMenu = false;
      return this.elem.find(".menu").slideUp();
    }
  },
  moveMenu: function() {
    return this.elem.find(".menu").css("left", "" + this.position.left + "px");
  },
  optionHTML: function(text) {
    return "<div class='option'>" + text + "</div>";
  },
  drawMenu: function(list) {
    this.menu.html(list.map(this.optionHTML).join(""));
    return console.log("drawing");
  },
  suggest: function(map) {
    return this.suggest = map;
  },
  read: function(before) {
    var key, keys, match, pattern, reg, result, _i, _len;

    keys = Object.keys(this.suggest);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      key = key[0];
      reg = new RegExp("\\" + key + "[\u4e00-\u9fa5a-zA-Z0-9]{0,8}$");
      match = before.match(reg);
      if (match != null) {
        this.piece = match[0].slice(1);
        pattern = new RegExp(this.piece.split("").join(".{0,6}"));
        result = this.suggest[key].filter(function(item) {
          return item.match(pattern);
        });
        if (result.length > 0) {
          this.currentKey = key;
          return result;
        }
      }
    }
    this.currentKey = "";
    return [];
  },
  selectClass: function(elem) {
    this.elem.find(".selected").removeClass("selected");
    return elem.addClass("selected");
  },
  selectNext: function() {
    var menu, next, selected;

    menu = this.elem.find(".menu");
    selected = menu.find(".selected");
    if (selected.length > 0) {
      next = selected.next();
      if (next.length > 0) {
        this.selectClass(next);
        return;
      }
    }
    return this.selectClass(menu.children().first());
  },
  selectLast: function() {
    var last, menu, selected;

    menu = this.elem.find(".menu");
    selected = menu.find(".selected");
    if (selected.length > 0) {
      last = selected.prev();
      if (last.length > 0) {
        this.selectClass(last);
        return;
      }
    }
    return this.selectClass(menu.children().last());
  },
  selectOption: function(elem) {
    var text;

    if (elem == null) {
      elem = this.elem.find(".selected");
    }
    text = elem.text();
    this.insertTag({
      key: this.currentKey,
      value: text
    });
    return this.foldMenu();
  },
  makeTag: function(data) {
    var close;

    close = "<span class='close'>x</span>";
    return $("<span key='" + data.key + "'      class='tag' contenteditable='false'        >" + data.value + close + "</span>");
  },
  test: function() {
    this.elem.find(".input").prepend(this.makeTag({
      key: "@",
      value: " value "
    }));
    return this.elem.find(".input").prepend(this.makeTag({
      key: "@",
      value: " value 2 "
    }));
  }
};
