// Generated by CoffeeScript 1.6.2
var EditorWithTags,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

EditorWithTags = (function() {
  function EditorWithTags(options) {
    this.caretGoto = __bind(this.caretGoto, this);
    this.clickOnTag = __bind(this.clickOnTag, this);
    this.selectClicked = __bind(this.selectClicked, this);
    this.selectOption = __bind(this.selectOption, this);
    this.selectLast = __bind(this.selectLast, this);
    this.selectNext = __bind(this.selectNext, this);
    this.selectClass = __bind(this.selectClass, this);
    this.read = __bind(this.read, this);
    this.loadSuggest = __bind(this.loadSuggest, this);
    this.drawMenu = __bind(this.drawMenu, this);
    this.moveMenu = __bind(this.moveMenu, this);
    this.foldMenu = __bind(this.foldMenu, this);
    this.dropMenu = __bind(this.dropMenu, this);
    this.insertTag = __bind(this.insertTag, this);
    this.getOffsetLeft = __bind(this.getOffsetLeft, this);
    this.getHTML = __bind(this.getHTML, this);
    this.replaceHTML = __bind(this.replaceHTML, this);
    this.hitDown = __bind(this.hitDown, this);
    this.hitUp = __bind(this.hitUp, this);
    this.hitEnter = __bind(this.hitEnter, this);
    this.keyup = __bind(this.keyup, this);
    this.keydown = __bind(this.keydown, this);
    this.textSpan = __bind(this.textSpan, this);
    this.onkeyup = __bind(this.onkeyup, this);
    this.onkeydown = __bind(this.onkeydown, this);
    this.loseFocus = __bind(this.loseFocus, this);
    this.clickOnComponent = __bind(this.clickOnComponent, this);
    this.blur = __bind(this.blur, this);
    this.focus = __bind(this.focus, this);
    this.setupEvents = __bind(this.setupEvents, this);
    this.editable = __bind(this.editable, this);
    this.delay = __bind(this.delay, this);
    this.text = __bind(this.text, this);    this.options = options;
    this.elem = $("<div>").addClass("editor-with-tags");
    this.input = $("<div>").addClass("input").attr("contenteditable", true);
    this.menu = $("<div>").addClass("menu");
    this.elem.append(this.input, this.menu);
    this.elem.find(".input").append($(document.createTextNode("")));
    this.setupEvents();
  }

  EditorWithTags.prototype.text = function(value) {};

  EditorWithTags.prototype.delay = function(t, f) {
    var _this = this;

    return setTimeout((function() {
      return f();
    }), t);
  };

  EditorWithTags.prototype.position = {
    left: 0
  };

  EditorWithTags.prototype.editable = function(elem) {
    return elem.attr("contenteditable", true);
  };

  EditorWithTags.prototype.setupEvents = function() {
    this.events = new EventEmitter;
    this.elem.on("focus", ".input", this.focus);
    this.elem.on("blur", ".input", this.blur);
    this.elem.on("keydown", ".input", this.onkeydown);
    this.elem.on("keyup", ".input", this.onkeyup);
    this.elem.on("click", this.clickOnComponent);
    this.elem.on("click", ".option", this.selectClicked);
    this.elem.on("click", ".tag", this.clickOnTag);
    $(document).on("click", this.loseFocus);
    return $(document).on("blur", this.loseFocus);
  };

  EditorWithTags.prototype.focus = function() {
    var _this = this;

    console.log("focus");
    this.elem.addClass("focus");
    return this.delay(0, function() {
      return _this.getOffsetLeft();
    });
  };

  EditorWithTags.prototype.blur = function() {
    return this.elem.removeClass("focus");
  };

  EditorWithTags.prototype.clickOnComponent = function(event) {
    event.stopPropagation();
    return false;
  };

  EditorWithTags.prototype.loseFocus = function(event) {
    return this.foldMenu();
  };

  EditorWithTags.prototype.onkeydown = function(event) {
    var _ref;

    if ((_ref = event.keyCode) === 13 || _ref === 38 || _ref === 40) {
      switch (event.keyCode) {
        case 13:
          this.hitEnter(event);
          break;
        case 38:
          this.hitUp(event);
          break;
        case 40:
          this.hitDown(event);
      }
      event.preventDefault();
      return false;
    }
    return this.events.emit("keydown", event);
  };

  EditorWithTags.prototype.onkeyup = function(event) {
    var _ref;

    this.events.emit("keyup", event);
    if ((_ref = event.keyCode) === 13 || _ref === 38 || _ref === 40) {
      event.preventDefault();
      return false;
    }
    return this.getOffsetLeft();
  };

  EditorWithTags.prototype.textSpan = function() {
    return $("<span>").attr("contenteditable", true).text("@");
  };

  EditorWithTags.prototype.keydown = function(callback) {
    return this.events.on("keydown", callback);
  };

  EditorWithTags.prototype.keyup = function(callback) {
    return this.events.on("keyup", callback);
  };

  EditorWithTags.prototype.hitEnter = function(event) {
    if (this.hasMenu) {
      this.selectOption();
    }
    return console.log(event);
  };

  EditorWithTags.prototype.hitUp = function(event) {
    if (this.hasMenu) {
      this.selectLast();
    }
    return console.log(event);
  };

  EditorWithTags.prototype.hitDown = function(event) {
    if (this.hasMenu) {
      this.selectNext();
    }
    return console.log(event);
  };

  EditorWithTags.prototype.replaceHTML = function(html) {
    return this.input.html(html);
  };

  EditorWithTags.prototype.getHTML = function() {
    return this.input.html();
  };

  EditorWithTags.prototype.getOffsetLeft = function() {
    var after, before, cursor, end, node, range, start, suggests, text;

    range = document.getSelection().getRangeAt(0);
    if (!range.collapsed) {
      return null;
    }
    node = range.commonAncestorContainer;
    text = node.data;
    if (text == null) {
      return null;
    }
    start = range.startOffset;
    end = range.endOffset;
    before = text.slice(0, start);
    after = text.slice(start);
    console.log("so got:", "###" + before + "#" + after + "###");
    suggests = this.read(before);
    if (suggests.length > 0) {
      $(node).after("<span id='cursor'></span>");
      cursor = this.elem.find("#cursor");
      node.data = before;
      this.position = cursor.position(this.elem);
      this.drawMenu(suggests);
      this.dropMenu();
      if (this.piece === "") {
        this.moveMenu();
      }
      this.selectNext();
      cursor.remove();
      node.data = text;
      return this.caretGoto(node, start);
    } else {
      return this.foldMenu();
    }
  };

  EditorWithTags.prototype.insertTag = function(data) {
    var after, before, newText, node, range, start, text;

    range = document.getSelection().getRangeAt(0);
    node = range.startContainer;
    text = node.textContent;
    start = range.startOffset;
    before = text.slice(0, start);
    after = text.slice(start);
    node.data = before.slice(0, -1);
    newText = $(document.createTextNode("x"));
    $(node).after(newText);
    $(node).after(this.makeTag(data));
    $(node).next().after(document.createTextNode(" "));
    newText[0].textContent = after + "";
    return this.caretGoto(newText[0], 0);
  };

  EditorWithTags.prototype.hasMenu = false;

  EditorWithTags.prototype.dropMenu = function() {
    if (!this.hasMenu) {
      console.log("drop");
      this.hasMenu = true;
      return this.elem.find(".menu").slideDown();
    }
  };

  EditorWithTags.prototype.foldMenu = function() {
    if (this.hasMenu) {
      this.hasMenu = false;
      return this.elem.find(".menu").slideUp();
    }
  };

  EditorWithTags.prototype.moveMenu = function() {
    return this.elem.find(".menu").css("left", "" + this.position.left + "px");
  };

  EditorWithTags.prototype.optionHTML = function(text) {
    return "<div class='option'>" + text + "</div>";
  };

  EditorWithTags.prototype.drawMenu = function(list) {
    this.menu.html(list.map(this.optionHTML).join(""));
    return console.log("drawing");
  };

  EditorWithTags.prototype.loadSuggest = function(map) {
    return this.suggest = map;
  };

  EditorWithTags.prototype.read = function(before) {
    var key, keys, match, pattern, reg, result, _i, _len;

    keys = Object.keys(this.suggest);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      key = key[0];
      reg = new RegExp("\\" + key + "[\u4e00-\u9fa5a-zA-Z0-9]{0,8}$");
      match = before.match(reg);
      if (match != null) {
        this.piece = match[0].slice(1);
        pattern = new RegExp(this.piece.split("").join(".{0,6}"));
        result = this.suggest[key].filter(function(item) {
          return item.match(pattern);
        });
        if (result.length > 0) {
          this.currentKey = key;
          return result;
        }
      }
    }
    this.currentKey = "";
    return [];
  };

  EditorWithTags.prototype.selectClass = function(elem) {
    this.elem.find(".selected").removeClass("selected");
    return elem.addClass("selected");
  };

  EditorWithTags.prototype.selectNext = function() {
    var menu, next, selected;

    menu = this.elem.find(".menu");
    selected = menu.find(".selected");
    if (selected.length > 0) {
      next = selected.next();
      if (next.length > 0) {
        this.selectClass(next);
        return;
      }
    }
    return this.selectClass(menu.children().first());
  };

  EditorWithTags.prototype.selectLast = function() {
    var last, menu, selected;

    menu = this.elem.find(".menu");
    selected = menu.find(".selected");
    if (selected.length > 0) {
      last = selected.prev();
      if (last.length > 0) {
        this.selectClass(last);
        return;
      }
    }
    return this.selectClass(menu.children().last());
  };

  EditorWithTags.prototype.selectOption = function(elem) {
    var text;

    if (elem == null) {
      elem = this.elem.find(".selected");
    }
    text = elem.text();
    this.insertTag({
      key: this.currentKey,
      value: text
    });
    return this.foldMenu();
  };

  EditorWithTags.prototype.selectClicked = function(event) {
    return this.selectOption($(event.target));
  };

  EditorWithTags.prototype.makeTag = function(data) {
    var close;

    close = "<span class='close'>x</span>";
    return $("<a key='" + data.key + "' class='tag' contenteditable='false'>" + data.value + " " + "</a>");
  };

  EditorWithTags.prototype.clickOnTag = function(event) {
    var currentTag, text;

    currentTag = $(event.target);
    text = currentTag.nextSibling;
    if (text == null) {
      text = document.createTextNode("");
      currentTag.after(text);
    }
    this.caretGoto(text, 0);
    event.stopPropagation();
    return false;
  };

  EditorWithTags.prototype.caretGoto = function(elem, start) {
    var range, selection;

    if (start == null) {
      start = 0;
    }
    if (window.getSelection != null) {
      range = document.createRange();
      range.setStart(elem, start);
      range.collapse(true);
      selection = window.getSelection();
      selection.removeAllRanges();
      return selection.addRange(range);
    }
  };

  EditorWithTags.prototype.test = function() {
    this.elem.find(".input").prepend(this.makeTag({
      key: "@",
      value: " value "
    }));
    return this.elem.find(".input").prepend(this.makeTag({
      key: "@",
      value: " value 2 "
    }));
  };

  return EditorWithTags;

})();

/*
//@ sourceMappingURL=editor.map
*/
